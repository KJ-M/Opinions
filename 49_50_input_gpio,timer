# 按键输入实验

## 设备树修改

参考led，beep修改设备树，编译完后加载进去查看设备树节点是否存在（设置正常）

## 驱动程序

重点：

使用原子操作设置一个原子变量保存按键状态，在read中检测按键状态，按下即原子操作改变按键状态值

```c
static ssize_t key_read (struct file *file, char __user *buf, size_t count, loff_t *offset)
{
    int ret = 0;
    int value;
    struct key_dev *dev = file->private_data;
    if(gpio_get_value(dev->key_gpio) == 0) {
        while(!gpio_get_value(dev->key_gpio));//等待按键释放
        atomic_set(&dev->keyvalue, KEY0VALUE);
    } else {
        atomic_set(&dev->keyvalue, INVAKEY);
    }
    value = atomic_read(&dev->keyvalue);
    ret = copy_to_user(buf, &value, sizeof(value));
    return ret;
}
```



## 测试app

测试app中打开设备后while循环里不断read按键值，读取到按下则输出，否则不输出

```c
/* 循环读取按键值数据 */
    while(1) {
        read(fd, &keyvalue, sizeof(keyvalue));
        if(keyvalue == KEY0VALUE) {
            printf("KEY0 Press, value = %#X\r\n", keyvalue);
        }
    }
```



# 内核定时器

​	驱动编写不必深究linux时钟配置问题，会用api函数即可

## 内核时钟基础及配置

可通过图形界面配置内核时钟频率，可配置范围100Hz-1000Hz，默认100Hz，即10ms产生一个时钟节拍，内核使用**jiffies全局变量记录从系统启动以来节拍数**，定时器及延时操作都是计算jiffies变化量间接计算时间，linux有jiffies相关函数完成jiffies到ms，us，ns转换或ms，us，ns转换到jiffies

## 内核定时器特性及相关函数分析

内核定时器使用**关键：超时时间+定时处理函数**

注意：内核定时器**超时自动关闭**，一般在定时处理函数中重启以达到周期计时功能

### 申请及初始化

`include/linux/timer.h`中的`timer_list`结构体表示内核定时器，要使用定时器需申请一个timer_list类型的变量，使用`void init_timer(struct timer_list *timer)`函数初始化定时器

### 向内核申请和删除定时器函数
```c
void add_timer(struct timer_list *timer)//该函数向申请并立刻开始计时

int del_timer(struct timer_list * timer)//删除定时器，返回0：定时器未激活，1：已激活

int del_timer_sync(struct timer_list *timer)//同上，不同的是此函数会等待处理器使用完定时器再删除
```
### 修改定时值函数：
```c
int mod_timer(struct timer_list *timer, unsigned long expires)//该函数修改定时器值后会**自动激活定时器！**
//返回0：调用前定时器未激活，返回1：调用前定时器已激活
```
### linux内核提供的短延时函数：

```c
void ndelay(unsigned long nsecs)
void udelay(unsigned long usecs) 
void mdelay(unsigned long mseces)
```

纳秒、微秒和毫秒延时函数。

## 内核定时器使用流程

```c
struct timer_list timer; /* 定义定时器 */
/* 定时器回调函数 */
void function(unsigned long arg)
    { 
/* 
* 定时器处理代码
*/

/* 如果需要定时器周期性运行的话就使用 mod_timer
 * 函数重新设置超时值并且启动定时器。
 */
 mod_timer(&timer, jiffies + msecs_to_jiffies(2000));
 	}

/* 初始化函数 */
void init(void) 
{
 init_timer(&timer); /* 初始化定时器 */

 timer.function = function; /* 设置定时处理函数 */
 timer.expires=jffies + msecs_to_jiffies(2000);/* 超时时间 2 秒 */
 timer.data = (unsigned long)&dev; /* 将设备结构体作为参数 */
 
 add_timer(&timer); /* 启动定时器 */
}

/* 退出函数 */
void exit(void)
{
 del_timer(&timer); /* 删除定时器 */
 /* 或者使用 */
 del_timer_sync(&timer);
}
```

### 注意：

在定时器处理函数中有一个参数，`void function(unsigned long arg)`为unsigned long类型，此参数常用于保存一个设备结构体的地址，从而可以在该函数中操作设备，具体使用如下：

初始化函数中：

```c
void init(void) 
{
 ...
 timer.** = ***;
 timer.** = ***;
 timer.data = (unsigned long)&dev; /* 将指针强制类型转化为unsigned long类型 */
 ...
}
```

定时处理函数中：

```c
void function(unsigned long arg)
    { 
    	struct dev_t *dev = (struct dev_t *)arg;//使用了强制类型转化将unsigned long转化为指针
		/* 
		* 定时器处理代码
		*/
		dev->... = ...;	//在此即可操作设备结构体中的内容
		/* 如果需要定时器周期性运行的话就使用 mod_timer
 		* 函数重新设置超时值并且启动定时器。
 		*/
 mod_timer(&timer, jiffies + msecs_to_jiffies(2000));
 	}
```



