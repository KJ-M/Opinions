{"files":{"54_platform_driver_base.md":{"mtime":1603980424515.3513,"size":415,"hash":"7ea54a6b02fbd8be7894938449b49000956bf7d975d0bbd6767f4363f9d49f42"},"bingfa,jingzheng.md":{"mtime":1603980424537.4248,"size":3487,"hash":"2b7e2229dfbd270acdb059bdb928741e73bb8b16a14885b3ab856a8959eaef61"},"C.md":{"mtime":1603980424515.3513,"size":14837,"hash":"d7c69ab7077b8dba13664e585b42af5c0fca8c3ecae0c57e688d4881f3e1a15c"},"C_practice/C_base.md":{"mtime":1603983696999.2314,"size":9433,"hash":"3b6ee0ce23e66e6551832f2a11b117ba9bcbb9c43545949e8608a0ec4b56c255"},"C_practice/C语言内存分配图.png":{"mtime":1603980424529.3982,"size":529758,"hash":"cda5c731fbb0c2010a72a5ab33855e7f4955188c0d39359d56d6c96a159e9545"},"C_problems.md":{"mtime":1603980424531.4045,"size":1273,"hash":"df8206a8b49f0eba61843d55ed6d13d2886a863a298a39ee3585496f19164fc4"},"C_program.md":{"mtime":1603980424532.409,"size":745,"hash":"463ec43a5af6694c29d8d13e16810427e5fa79b48992186bf60d2fe7cf1284a3"},"Device_Tree.md":{"mtime":1603980424533.411,"size":2754,"hash":"37a1f87738053e14ad81096904f9604d81d0d6df9d10256d55335007157c76cc"},"device_tree_led.md":{"mtime":1603980424538.428,"size":3642,"hash":"1d5a7dc63bf607c25735aa6a1e0954902d951a48117e266748a1e8779a27835a"},"download+ddrtest.md":{"mtime":1603980424538.428,"size":295,"hash":"618c2f05bb59283a989baa5ba06d99ff7cbed04ec6cdeda253038dcf9e52f2c9"},"draw_diagrams.md":{"mtime":1603980424539.431,"size":1450,"hash":"fd0866b1785f13334ffc63d38008ead8caababe1d391b09dcc7df4bd3d2001c4"},"English_practice.md":{"mtime":1603980424533.411,"size":4945,"hash":"7c57689da35decc98e31b927db417341b05d5f6b022e6b2b158d86419e3c0cf0"},"exercise/运动.md":{"mtime":1603980424540.4353,"size":325,"hash":"a92de8ea1ae3e0d56b7f09f1bb7f9284b920abdf7066e214569156641133d59d"},"git.md":{"mtime":1603980424546.4548,"size":7997,"hash":"e66b72d653c19d84bb5790f1baf9c2993ed69cc69ed30a2e67bfc55023ff27ee"},"images/1.png":{"mtime":1603980424559.4976,"size":104367,"hash":"5095dbac817334fee26f528d9dbd075093dba5451e7840a517c72bccad23b209"},"images/2.png":{"mtime":1603980424561.5042,"size":19619,"hash":"263e37837e7354509e887d49b75b7e6a2ebe7b97d6712051fff512da53111d9b"},"images/3.png":{"mtime":1603980424562.508,"size":125968,"hash":"23b665a4add9e76794d6ac026c571e60e2d00e8bd9dd69e0c76e4a60664441ba"},"images/4.png":{"mtime":1603980424563.511,"size":56104,"hash":"b99ed1df2240d94a27748f1d70c672162af64c4c2766567616b6a406946d095b"},"irq.md":{"mtime":1603980424564.5144,"size":441,"hash":"29212a6f797ddd158b795f7ff99af567a5d3e6a3da34aae6f6ec57bf8eb577b9"},"led_driver_base.md":{"mtime":1603980424565.5178,"size":5427,"hash":"93f9ef2fd86a258c08981f5c07ee7ff5c95d34ee3064de0d61042ec42e8d7388"},"linux_app/app_note.md":{"mtime":1603980424567.5242,"size":0,"hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"linux_base.md":{"mtime":1603980424568.528,"size":1081,"hash":"c0487ff0918da9dea95073e4c3f178c98cae1fb0f239c094804eae5630749076"},"linux_driver_base.md":{"mtime":1603980424569.5308,"size":7661,"hash":"91c0ba959655bf90b111f693812ef8aba2ea25f0f556385bb3f9a2e144306052"},"Makefile.md":{"mtime":1603980424535.4175,"size":8653,"hash":"4a1635f3921c6c432d7f1b2dce31258442aeb3d3845d91caa4a719497d8cf879"},"Markdown_test.md":{"mtime":1603980424536.421,"size":1238,"hash":"69debb7bdee80583e847642e93ee5633ac548207df8d9ca4668d8888835bbcf3"},"newchr.md":{"mtime":1603980424569.5308,"size":3442,"hash":"fc3854e02a6c8f10d7cbc42a033eb7ca3c78e9dd34d22295159686d2f8837c64"},"picocom.md":{"mtime":1603980424570.535,"size":130,"hash":"fb4e3c7be391796bd3cd233f8886cf1215aae6197d934dbbc1fef22e491b9054"},"pinctrl,gpio.md":{"mtime":1603980424570.535,"size":8050,"hash":"a3ba9f3804909902892c641dd749b0d0a20ac2332a30b140b3f7fc0dc45c1917"},"platform.md":{"mtime":1603980424571.5378,"size":2751,"hash":"e2be656842f2409ab3fae15a7cad75ad1792df4a7b1b2101e7d5de666c5809fc"},"rootfs_base.md":{"mtime":1603980424572.541,"size":6232,"hash":"c8766463a6da98acf11e7c1769fe85f119f65a7ad94f472bec87c902f057b126"},"sum_chr_dev.md":{"mtime":1603980424574.5479,"size":446,"hash":"e5da55604339f9e521fd72025d06ccc42272480c4b3ffd552dadb74b74d82bd0"},"Ubuntu_problems.md":{"mtime":1603980424536.421,"size":3363,"hash":"2a2375212fbe5e4bfb58655d550974061ef966dc3ac5c97d1c6c8163d31d3829"},"use_of_vim.md":{"mtime":1603980424581.5713,"size":11570,"hash":"221810e08c8833435324b76be7d3d1e8879bd1f77267c2dbb5c4d7096611aa0b"},"Windows软件.md":{"mtime":1603980424537.4248,"size":332,"hash":"847f5c1f3cbd013bf69482419b1eaf18b86284201f7c7f03d189c5ef3df363a3"},"zusefeizuse.md":{"mtime":1603980424582.575,"size":342,"hash":"a20b7e68a62f4b308365ea39b2dac0564d0e6eeaf29ae8ddeec20eb8477caa1d"},"应用开发.md":{"mtime":1603980424583.5774,"size":4329,"hash":"ec06670c65bcfac9a8fa7114f3dfdb2bf7d32b61b84b12c8e0b8d908eb904fb1"},"网络.md":{"mtime":1603980424583.5774,"size":1211,"hash":"1de724bdb3066ad8e6c7fb1a697fba135e37d4106bb070d50287a8683de7a4a3"},"软件使用.md.md":{"mtime":1603980424584.5818,"size":600,"hash":"5dd815afbe2af5ac0e88ee7bbd82e664079830e1d265db20f4b7a2292fa71405"},"阻塞，非阻塞，异步通知.md":{"mtime":1603980424584.5818,"size":219,"hash":"7f0dfa31908452825b97f455222fe73e3395c052da9198fd83aa72c068990ce2"}},"metadata":{"7ea54a6b02fbd8be7894938449b49000956bf7d975d0bbd6767f4363f9d49f42":{"links":[],"embeds":[],"tags":[],"headings":[]},"2b7e2229dfbd270acdb059bdb928741e73bb8b16a14885b3ab856a8959eaef61":{"links":[],"embeds":[],"tags":[],"headings":[{"line":2,"heading":"原子操作：","level":2},{"line":6,"heading":"自旋锁：","level":2},{"line":10,"heading":"自旋锁特点：","level":3},{"line":16,"heading":"信号量：","level":2},{"line":20,"heading":"信号量特点：","level":3},{"line":27,"heading":"互斥体：","level":2},{"line":31,"heading":"以上四者的led实验（linux并发与竞争实验）分析：","level":2},{"line":35,"heading":"原子操作实验：","level":3},{"line":41,"heading":"自旋锁实验：","level":3},{"line":47,"heading":"信号量实验：","level":3},{"line":53,"heading":"互斥体实验：","level":3}]},"d7c69ab7077b8dba13664e585b42af5c0fca8c3ecae0c57e688d4881f3e1a15c":{"links":[],"embeds":[],"tags":[{"line":101,"tag":"#define语法基本知识（不加分号，括号使用）"}],"headings":[{"line":0,"heading":"重入","level":2},{"line":6,"heading":"Heap和Stack，静态区区别","level":2},{"line":8,"heading":"基本特征：","level":3},{"line":19,"heading":"**经典例子**：","level":3},{"line":53,"heading":"堆和栈存取效率比较：","level":3},{"line":62,"heading":"sizeof和strlen区别","level":2},{"line":68,"heading":"大端小端（big endian&little endian）","level":2},{"line":79,"heading":"函数调用时参数传递方式","level":2},{"line":83,"heading":"中断和异常的区别","level":2},{"line":89,"heading":"优先级反转","level":2},{"line":93,"heading":"预处理#define声明一个常数，用以表示一年有多少秒（忽略闰年问题）","level":2},{"line":106,"heading":"写一个标准宏MIN，这个宏输入两个参数返回较小的一个","level":2},{"line":116,"heading":"用变量a给出一系列的定义","level":2},{"line":145,"heading":"关键词static作用","level":2},{"line":158,"heading":"关键词const作用","level":2},{"line":173,"heading":"volatile作用","level":2},{"line":177,"heading":"位操作方法","level":2},{"line":195,"heading":"访问特定物理地址并设置值","level":2},{"line":207,"heading":"找出中断函数问题","level":2},{"line":227,"heading":"无符号数据类型问题","level":2},{"line":240,"heading":"int类型问题、","level":2},{"line":266,"heading":"typedef和define相似部分的对比","level":2},{"line":284,"heading":"进程和线程的区别：","level":2},{"line":291,"heading":"字符串复制函数：","level":2},{"line":310,"heading":"字符串翻转函数：","level":2},{"line":312,"heading":"结构体对齐大小问题","level":2},{"line":359,"heading":"笔试题目","level":2},{"line":361,"heading":"malloc函数用法：给出一段代码判断问题所在","level":3},{"line":363,"heading":"strcmp()函数","level":3}]},"d51699e600dcedbc44c606648c4b0dee8409aa925c31da2c5847749613fb7c47":{"links":[{"line":150,"link":"C#结构体对齐大小问题","original":"[[C#结构体对齐大小问题]]","displayText":"","beforeContext":"见onenote结构体部分笔记和","afterContext":""}],"embeds":[{"line":153,"link":"C语言内存分配图.png","original":"![[C语言内存分配图.png]]","beforeContext":"实际上是C语言中常用的几个section（段，程序或者变量存放的位置）","afterContext":""}],"tags":[],"headings":[{"line":0,"heading":"C语言内存","level":1},{"line":2,"heading":"指针基础","level":2},{"line":4,"heading":"指针修饰符","level":3},{"line":5,"heading":"const    常量，只读，不能变","level":4},{"line":25,"heading":"数组","level":2},{"line":32,"heading":"初始化","level":3},{"line":33,"heading":"int a[10] = 空间","level":4},{"line":34,"heading":"C语言{}的意义","level":4},{"line":38,"heading":"char buf[10] = {'a','b','c'}\t普通数组用法","level":4},{"line":42,"heading":"char buf[10] = {\"abc\"}\t字符串用法","level":4},{"line":45,"heading":"char buf[10] = \"abc\"","level":4},{"line":48,"heading":"char buf[10] = \"abc\"与char *p = \"abc\"区别","level":4},{"line":57,"heading":"char buf[] = \"abc\"与以上带buf[10]的区别","level":4},{"line":60,"heading":"初始化完后二次赋值","level":3},{"line":61,"heading":"分为字符空间和非字符空间拷贝","level":4},{"line":68,"heading":"字符空间拷贝原则","level":4},{"line":72,"heading":"strcpy()","level":4},{"line":75,"heading":"非字符空间拷贝原则","level":4},{"line":81,"heading":"memcpy()","level":4},{"line":92,"heading":"指针数组char *a[100]","level":3},{"line":98,"heading":"指针数组和二维指针的关系 char **a","level":4},{"line":103,"heading":"指针和数组原理性知识总结","level":3},{"line":104,"heading":"定义指针，分别表示 int a[10],int b[5][6]首地址","level":4},{"line":113,"heading":"C语言编译器本质是字符解释器，定义变量是基于变量名优先从右边解释","level":4},{"line":114,"heading":"int a[10]","level":5},{"line":118,"heading":"int *a","level":5},{"line":123,"heading":"int *a[10]","level":5},{"line":127,"heading":"int **a","level":5},{"line":131,"heading":"int (*p)[10]","level":5},{"line":135,"heading":"解释：始终记住指针和数组的本质","level":4},{"line":138,"heading":"指针是否够表示数组名判断技巧","level":5},{"line":149,"heading":"结构体","level":2},{"line":152,"heading":"内存分布图","level":2},{"line":156,"heading":"size x.out查看x.out各段所占空间的大小","level":3},{"line":158,"heading":"程序分debug版和release版的原因","level":3},{"line":159,"heading":"可执行文件大小由.text段和.data段决定","level":4},{"line":160,"heading":"printf()中的“”字符所在内存也保存在text段，使用printf越多，text段越大","level":4},{"line":161,"heading":"linux下程序中不同位置加减变量或数组测试出异常点：","level":4},{"line":168,"heading":"函数内static和全局变量存放位置一样，区别在于","level":3},{"line":171,"heading":"使用nm -n查看函数中各个符号所在位置","level":3},{"line":173,"heading":"堆空间的分配和释放","level":3},{"line":174,"heading":"malloc()一旦申请成功，返回地址，","level":4},{"line":181,"heading":"释放","level":4},{"line":184,"heading":"函数名，数组名","level":2},{"line":230,"heading":"函数名，数组名，变量名都是些标识符，在编译到最后都会使用地址代替，不存在储存这些名的问题","level":3},{"line":232,"heading":"函数指针相关","level":2}]},"cda5c731fbb0c2010a72a5ab33855e7f4955188c0d39359d56d6c96a159e9545":{"links":[],"embeds":[],"tags":[],"headings":[]},"df8206a8b49f0eba61843d55ed6d13d2886a863a298a39ee3585496f19164fc4":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"memset()用法","level":2},{"line":11,"heading":"sizeof()用法","level":2},{"line":13,"heading":"sprintf()用法","level":2}]},"463ec43a5af6694c29d8d13e16810427e5fa79b48992186bf60d2fe7cf1284a3":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"读入一个文件，判断文件中字母a的个数","level":2}]},"37a1f87738053e14ad81096904f9604d81d0d6df9d10256d55335007157c76cc":{"links":[],"embeds":[],"tags":[],"headings":[{"line":4,"heading":"imx6ull节点包含关系：","level":1},{"line":19,"heading":"设备树要点：","level":2},{"line":26,"heading":"设备树常用of函数：","level":2},{"line":28,"heading":"查找节点的of函数：","level":3},{"line":42,"heading":"查找父/子节点的of函数：","level":3},{"line":48,"heading":"提取属性值的of函数：","level":3},{"line":78,"heading":"其他常用of函数:","level":3}]},"1d5a7dc63bf607c25735aa6a1e0954902d951a48117e266748a1e8779a27835a":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"设备树下的led驱动","level":1},{"line":6,"heading":"1、修改设备树文件","level":2},{"line":26,"heading":"2、程序代码中设备树的引用","level":2}]},"618c2f05bb59283a989baa5ba06d99ff7cbed04ec6cdeda253038dcf9e52f2c9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"ddr3-test","level":2},{"line":4,"heading":"linux-download","level":2}]},"fd0866b1785f13334ffc63d38008ead8caababe1d391b09dcc7df4bd3d2001c4":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"State Diagrams（状态图）","level":2},{"line":11,"heading":"Class Diagrams（类图）","level":2},{"line":37,"heading":"Flowcharts（流程图）","level":2},{"line":58,"heading":"Sequence Diagrams(顺序图)","level":2}]},"7c57689da35decc98e31b927db417341b05d5f6b022e6b2b158d86419e3c0cf0":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"*NO.1 Thursday, April 2, 2020*","level":2},{"line":23,"heading":"*NO.2 Friday,April 3,2020*","level":2},{"line":51,"heading":"*NO.3 Saturday,April 4,2020*","level":2},{"line":75,"heading":"*NO.4 Saturday，April 11,2020*","level":2},{"line":99,"heading":"*NO.5 Sunday,April19,2020*","level":2},{"line":107,"heading":"*NO.6 Friday,May8,2020*","level":2}]},"a92de8ea1ae3e0d56b7f09f1bb7f9284b920abdf7066e214569156641133d59d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"深蹲","level":2}]},"e66b72d653c19d84bb5790f1baf9c2993ed69cc69ed30a2e67bfc55023ff27ee":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Git基本配置","level":2},{"line":28,"heading":"git基本操作","level":2},{"line":90,"heading":"远程库基本操作","level":3},{"line":122,"heading":"windows下设置免输入用户名密码","level":2},{"line":129,"heading":"git stash使用","level":2},{"line":147,"heading":"git 撤销对工作区的修改","level":2},{"line":165,"heading":"git clone","level":2},{"line":167,"heading":"git clone <远程仓库地址>：","level":3},{"line":171,"heading":"git clone -b <指定分支名> <远程仓库地址>","level":3},{"line":175,"heading":"git push","level":2},{"line":183,"heading":"git pull","level":2},{"line":191,"heading":"git提交冲突后解决","level":3},{"line":203,"heading":"git 在所有分支中查询最近提交的关键字，找到对应的分支","level":3}]},"5095dbac817334fee26f528d9dbd075093dba5451e7840a517c72bccad23b209":{"links":[],"embeds":[],"tags":[],"headings":[]},"263e37837e7354509e887d49b75b7e6a2ebe7b97d6712051fff512da53111d9b":{"links":[],"embeds":[],"tags":[],"headings":[]},"23b665a4add9e76794d6ac026c571e60e2d00e8bd9dd69e0c76e4a60664441ba":{"links":[],"embeds":[],"tags":[],"headings":[]},"b99ed1df2240d94a27748f1d70c672162af64c4c2766567616b6a406946d095b":{"links":[],"embeds":[],"tags":[],"headings":[]},"29212a6f797ddd158b795f7ff99af567a5d3e6a3da34aae6f6ec57bf8eb577b9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"memset用法","level":2}]},"93f9ef2fd86a258c08981f5c07ee7ff5c95d34ee3064de0d61042ec42e8d7388":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"LED驱动基础","level":1},{"line":6,"heading":"寄存器物理地址映射为虚拟地址","level":2},{"line":51,"heading":"外设初始化部分","level":2},{"line":100,"heading":"控制led亮灭函数（.write函数）","level":2},{"line":144,"heading":"测试APP的编写","level":2},{"line":183,"heading":"read和write的返回值：","level":2}]},"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855":{"links":[],"embeds":[],"tags":[],"headings":[]},"c0487ff0918da9dea95073e4c3f178c98cae1fb0f239c094804eae5630749076":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Linux移植","level":1},{"line":4,"heading":"主频相关","level":2},{"line":6,"heading":"查看主频信息","level":3},{"line":13,"heading":"使能8线EMMC驱动","level":2},{"line":17,"heading":"网络驱动修改","level":2},{"line":23,"heading":"保存图形界面的配置","level":2}]},"91c0ba959655bf90b111f693812ef8aba2ea25f0f556385bb3f9a2e144306052":{"links":[],"embeds":[],"tags":[],"headings":[{"line":18,"heading":"字符设备开发过程","level":1},{"line":20,"heading":"新建工程","level":2},{"line":30,"heading":"驱动编写","level":2},{"line":32,"heading":"模块加载卸载","level":3},{"line":46,"heading":"Makefile","level":2},{"line":61,"heading":"测试模块加载和卸载","level":2},{"line":63,"heading":"模块相关的命令","level":3},{"line":72,"heading":"字符设备的注册与注销","level":2},{"line":104,"heading":"字符设备操作的具体实现","level":2},{"line":138,"heading":"添加license和作者信息","level":2},{"line":145,"heading":"完善字符设备读写操作","level":2},{"line":186,"heading":"测试APP的编写","level":2},{"line":244,"heading":"read和write的返回值：","level":2},{"line":250,"heading":"最终测试","level":2}]},"4a1635f3921c6c432d7f1b2dce31258442aeb3d3845d91caa4a719497d8cf879":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"参考《跟我一起写Makefile.pdf》正点原子linux资料百度云里有","level":1},{"line":3,"heading":"软件使用","level":2},{"line":9,"heading":".c -> .exe过程(*参第二部分*)","level":2},{"line":27,"heading":"Makefile规则（常识，参2.1）","level":2},{"line":41,"heading":"make工作原理（参2.3）","level":2},{"line":45,"heading":"makefile的变量（参2.4）","level":2},{"line":57,"heading":"makefile自动推导（参2.5）","level":2},{"line":97,"heading":"clean","level":2},{"line":110,"heading":"4.1、Makefile基本要知道的东西","level":3},{"line":128,"heading":"4.2、Makefile的文件名","level":3},{"line":130,"heading":"4.3、引用其他Makefile","level":3},{"line":138,"heading":"4.4、环境变量MAKEFILES，尽量不用这个变量，会出现奇怪的事","level":3},{"line":140,"heading":"4.5、Make的工作方式","level":3},{"line":144,"heading":"5、书写规则，make最终目标一般为第一个目标，伪目标也可","level":2},{"line":148,"heading":"5.1、规则举例，类似于2.1，介绍最简单的规则","level":3},{"line":150,"heading":"5.2、规则语法，多个文件间空格分号tab键的使用，换行符\\的使用","level":3},{"line":152,"heading":"5.3、通配符*?[...]~及通配符转义字符\\","level":3},{"line":156,"heading":"5.4、文件搜寻，让make在不同目录下寻找源文件.c，即VPATH变量的作用，vpath关键字的使用","level":3},{"line":158,"heading":"5.5、伪目标.PHONY:clean/all/一口气编译多个目标的妙用","level":3},{"line":162,"heading":"5.6、多目标：自动化变量$@的引出并简单举例","level":3},{"line":164,"heading":"5.7、静态模式：$(objects): %.o: %.c","level":3},{"line":166,"heading":"5.8、自动生成依懒性[.d]文件，利用编译器找到C文件#include那些文件","level":3},{"line":168,"heading":"6、书写命令","level":2},{"line":170,"heading":"6.1、显示make执行的命令，使用@隐藏命令，-n只显示命令但不执行命令","level":3},{"line":172,"heading":"6.2、命令执行，上一条命令结果应用于下一条命令时 ，需将这两条命令写在一行，用；隔开","level":3},{"line":174,"heading":"6.3、命令出错的处理，使用-忽略，或其他方法终止","level":3},{"line":176,"heading":"6.4、嵌套型Make，多级目录下的makefile使用，参数传递$(MAKE)","level":3},{"line":178,"heading":"6.5、定义命令包，一次执行多个命令define","level":3},{"line":180,"heading":"7、使用变量","level":2},{"line":184,"heading":"7.1、变量基础使用","level":3},{"line":186,"heading":"7.2、变量中的变量， foo = $(bar),bar值可在任意地方，可前可后","level":3},{"line":188,"heading":"7.2、:=，?=，=区别，使用#注释巧妙生成变量间的空格","level":3},{"line":190,"heading":"7.3、变量的高级用法","level":3},{"line":192,"heading":"7.3.1、将变量中的指定字符串替换，%.c->%.o，.c=.o","level":4},{"line":194,"heading":"7.3.2、变量套变量$($(x))，变量套变量加函数使用（灵活使用变量）","level":4},{"line":196,"heading":"7.4、追加变量值+=","level":3},{"line":198,"heading":"7.5、override，命令行中的参数在Makefile中赋值","level":3},{"line":200,"heading":"7.6、多行变量，define命令包，参考6.5","level":3},{"line":202,"heading":"7.7、环境变量，make执行中默认使用的变量，若makefile中定义，则覆盖环境变量","level":3},{"line":204,"heading":"7.8、目标变量，仅限于一个目标下使用的变量值prog : CFLAGS = -g","level":3},{"line":210,"heading":"7.9、模式变量，给一系列符合指定模式（比如.o结尾)的目标定义的变量","level":3},{"line":212,"heading":"8、if，else,endif","level":2},{"line":214,"heading":"9、使用函数，字符串处理，文件名操作，foreach，if，call，origin，shell，控制make函数","level":2},{"line":216,"heading":"10、make的运行","level":2},{"line":218,"heading":"10.1、make命令执行后三个退出码0，1，2","level":3},{"line":220,"heading":"10.2、指定Makefile，默认搜索目录下的Makefile/makefile/GNUmakefile,但可指定其他名字的.mk文件","level":3},{"line":222,"heading":"10.3 指定目标,默认指定第一个目标为最终目标，也可make命令后跟目标名字直接编译对应目标，这个名字存放在环境变量MAKECMDGOALS中","level":3},{"line":225,"heading":"10.4 检查规规则，只检查命令或执行序列，不执行规则","level":3},{"line":228,"heading":"10.5、make的参数make命令后跟的一堆参数等","level":3},{"line":229,"heading":"11、隐含规则，make默认的规则,如.c文件默认会编译为.o文件这种规则","level":2},{"line":231,"heading":"11.1、使用隐含规则，想要使用隐含规则生成目标文件，要做的是不写出这个规则","level":3},{"line":233,"heading":"11.2、隐含规则一览，不同语言、行为对应的隐含规则","level":3},{"line":235,"heading":"11.3、隐含规则使用的变量，11.2中规则中带的变量","level":3},{"line":236,"heading":"11.3.1、关于命令的变量（$(CC)等）","level":4},{"line":237,"heading":"11.3.2、关于参数的变量","level":4},{"line":239,"heading":"11.4、隐含规则链：为生成最终目标而产生中间文件并在产生之后将中间文件自动删除","level":3},{"line":241,"heading":"11.5、模式规则！！隐含规则+模式规则，重要点","level":3},{"line":242,"heading":"11.5.1、模式规则介绍，目标和依赖中%.o,%.c的使用","level":4},{"line":243,"heading":"11.5.2、模式规则示例","level":4},{"line":244,"heading":"11.5.3、自动化变量$@,$<...","level":4},{"line":245,"heading":"11.5.4、模式的匹配","level":4},{"line":246,"heading":"11.5.5、重载内建的隐含规则，自己定义隐含规则","level":4},{"line":247,"heading":"11.5.6、后缀规则","level":4},{"line":248,"heading":"11.5.7、隐含规则搜索算法","level":4},{"line":250,"heading":"12、使用make更新函数库文件","level":2},{"line":252,"heading":"13、后序","level":2}]},"69debb7bdee80583e847642e93ee5633ac548207df8d9ca4668d8888835bbcf3":{"links":[],"embeds":[{"line":56,"link":"图片地址","original":"![[图片地址]]","beforeContext":"","afterContext":""}],"tags":[],"headings":[{"line":1,"heading":"这是一个md文件","level":1},{"line":2,"heading":"这是一个副标题","level":2},{"line":3,"heading":"这是一个三级标题","level":3},{"line":11,"heading":"markdown段落格式","level":2},{"line":23,"heading":"markdown引用内容","level":2},{"line":30,"heading":"markdown列表","level":2},{"line":31,"heading":"有序列表","level":3},{"line":36,"heading":"无序列表","level":3},{"line":41,"heading":"有序无序嵌套","level":3},{"line":43,"heading":"使用","level":3},{"line":48,"heading":"markdown分隔号","level":2},{"line":50,"heading":"markdown链接","level":2},{"line":51,"heading":"普通链接","level":3},{"line":55,"heading":"图片链接","level":3},{"line":59,"heading":"markdown代办清单","level":2},{"line":62,"heading":"markdown代码块","level":2},{"line":63,"heading":"四个空格代表本行为代码","level":3},{"line":64,"heading":"～～～标记代码段","level":3},{"line":71,"heading":"markdown注脚","level":2},{"line":72,"heading":"markdown目录","level":2},{"line":76,"heading":"下划线","level":2}]},"fc3854e02a6c8f10d7cbc42a033eb7ca3c78e9dd34d22295159686d2f8837c64":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"新字符设备驱动","level":1},{"line":2,"heading":"基础：之前的老字符设备驱动","level":2},{"line":4,"heading":"1、创建硬件设备私有数据","level":2},{"line":33,"heading":"2、自动分配和释放设备号","level":2},{"line":55,"heading":"3、新字符设备注册和注销方法","level":2},{"line":91,"heading":"4、自动创建设备节点","level":2}]},"fb4e3c7be391796bd3cd233f8886cf1215aae6197d934dbbc1fef22e491b9054":{"links":[],"embeds":[],"tags":[],"headings":[]},"a3ba9f3804909902892c641dd749b0d0a20ac2332a30b140b3f7fc0dc45c1917":{"links":[],"embeds":[],"tags":[],"headings":[{"line":6,"heading":"遇到问题：","level":2},{"line":8,"heading":"1、释放IO","level":3},{"line":12,"heading":"2、","level":3},{"line":38,"heading":"设备树的修改","level":2},{"line":76,"heading":"驱动文件修改","level":2},{"line":113,"heading":"驱动规范源码：","level":2}]},"e2be656842f2409ab3fae15a7cad75ad1792df4a7b1b2101e7d5de666c5809fc":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"platform总线基础","level":2},{"line":52,"heading":"platform驱动","level":2},{"line":58,"heading":"网上资料（待整理）","level":2}]},"c8766463a6da98acf11e7c1769fe85f119f65a7ad94f472bec87c902f057b126":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"根文件系统","level":1},{"line":2,"heading":"linux 根目录各文件夹介绍","level":2},{"line":16,"heading":"使用BUSYBOX创建","level":2},{"line":88,"heading":"测试根文件系统","level":2},{"line":97,"heading":"完善根文件系统","level":2},{"line":103,"heading":"测试根文件系统","level":2},{"line":105,"heading":"软件运行测试","level":3},{"line":125,"heading":"中文字符测试","level":3},{"line":129,"heading":"开机自启动测试","level":3},{"line":141,"heading":"外网连接测试","level":3}]},"e5da55604339f9e521fd72025d06ccc42272480c4b3ffd552dadb74b74d82bd0":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"问题总结","level":2},{"line":4,"heading":"字符设备框架：","level":2},{"line":6,"heading":"read和write的返回值：","level":2}]},"2a2375212fbe5e4bfb58655d550974061ef966dc3ac5c97d1c6c8163d31d3829":{"links":[],"embeds":[{"line":19,"link":"images/1.png","original":"![[images/1.png]]","beforeContext":"","afterContext":"使用fdisk对磁盘分区进行增删，分完区用mkfs进行格式化对于SD卡，命令sudo fdisk /dev/sdb可进入fdisk设置界面，通过指示输入不同命令可完成对SD卡的分区，显示详细信息，分区type设置，可设置分区大小，分区完成后使用mkfs进行格式化此处分区type和格式化的文件类型似乎关系不大，所以关注格式化时设置的文件类型，一般使用vfat格式化，即使用下图中的第一行格式化完成即可使用mount或者umount进行挂载卸载"},{"line":19,"link":"images/2.png","original":"![[images/2.png]]","beforeContext":"使用fdisk对磁盘分区进行增删，分完区用mkfs进行格式化对于SD卡，命令sudo fdisk /dev/sdb可进入fdisk设置界面，通过指示输入不同命令可完成对SD卡的分区，显示详细信息，分区type设置，可设置分区大小，分区完成后使用mkfs进行格式化此处分区type和格式化的文件类型似乎关系不大，所以关注格式化时设置的文件类型，一般使用vfat格式化，即使用下图中的第一行","afterContext":"格式化完成即可使用mount或者umount进行挂载卸载"},{"line":27,"link":"images/3.png","original":"![[images/3.png]]","beforeContext":"/etc/apt/sources.list文件里保存了apt-get update对应的源，该命令为参考sources.list中的源更新本地软件库，比如增加新的源，就需要update一下来同步，才能进行安装对应软件，不同步就找不到软件","afterContext":""},{"line":27,"link":"images/4.png","original":"![[images/4.png]]","beforeContext":"/etc/apt/sources.list文件里保存了apt-get update对应的源，该命令为参考sources.list中的源更新本地软件库，比如增加新的源，就需要update一下来同步，才能进行安装对应软件，不同步就找不到软件","afterContext":""}],"tags":[],"headings":[{"line":0,"heading":"Ubuntu系统安装","level":2},{"line":10,"heading":"磁盘挂载相关:","level":2},{"line":26,"heading":"解决sudo apt-get update命令执行问题:","level":2},{"line":31,"heading":"Ubuntu查看文件夹内存大小：","level":2},{"line":34,"heading":"Ubuntu下常用解压命令：","level":2},{"line":37,"heading":"U盘拷贝时sync同步","level":2},{"line":41,"heading":"全局搜索命令：","level":2},{"line":45,"heading":"Ubuntu下查看正在运行的软件cpu内存：","level":2},{"line":49,"heading":"Ubuntu下安装flathub下的软件","level":2}]},"221810e08c8833435324b76be7d3d1e8879bd1f77267c2dbb5c4d7096611aa0b":{"links":[],"embeds":[],"tags":[],"headings":[{"line":5,"heading":"以下为vim的基本快捷键","level":2},{"line":53,"heading":"vim进阶快捷键：","level":2},{"line":55,"heading":"插入模式","level":3},{"line":67,"heading":"光标移动","level":3},{"line":73,"heading":"ctags使用：","level":2},{"line":81,"heading":"cscope使用：","level":2},{"line":93,"heading":"Nerdtree快捷键","level":2},{"line":108,"heading":"neovim配置：","level":2},{"line":112,"heading":"安装插件vim-plug:","level":2},{"line":127,"heading":"可供参考的vim配置：","level":2}]},"847f5c1f3cbd013bf69482419b1eaf18b86284201f7c7f03d189c5ef3df363a3":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"谷歌浏览器","level":2}]},"a20b7e68a62f4b308365ea39b2dac0564d0e6eeaf29ae8ddeec20eb8477caa1d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"linux同步机制之wait_event和wake_up","level":2}]},"ec06670c65bcfac9a8fa7114f3dfdb2bf7d32b61b84b12c8e0b8d908eb904fb1":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"文件编程","level":2},{"line":7,"heading":"系统调用方式：","level":3},{"line":17,"heading":"库函数方式：","level":3},{"line":21,"heading":"时间编程","level":2},{"line":28,"heading":"时间获取","level":3},{"line":56,"heading":"进程","level":2},{"line":58,"heading":"定义","level":3},{"line":62,"heading":"进程和程序的区别","level":3},{"line":66,"heading":"特点","level":3},{"line":81,"heading":"进程ID","level":3},{"line":86,"heading":"进程互斥","level":3},{"line":90,"heading":"临界资源","level":3},{"line":94,"heading":"临界区","level":3},{"line":98,"heading":"进程同步","level":3},{"line":102,"heading":"进程调度","level":3},{"line":117,"heading":"进程操作函数","level":3},{"line":152,"heading":"进程通信","level":3},{"line":156,"heading":"线程","level":2},{"line":158,"heading":"线程优点","level":3},{"line":162,"heading":"linux下多线程特点","level":3}]},"1de724bdb3066ad8e6c7fb1a697fba135e37d4106bb070d50287a8683de7a4a3":{"links":[],"embeds":[],"tags":[],"headings":[]},"5dd815afbe2af5ac0e88ee7bbd82e664079830e1d265db20f4b7a2292fa71405":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Windows&Linux下常用软件","level":1},{"line":1,"heading":"Obsidian","level":2},{"line":2,"heading":"安装","level":3},{"line":6,"heading":"配置","level":3}]},"7f0dfa31908452825b97f455222fe73e3395c052da9198fd83aa72c068990ce2":{"links":[],"embeds":[],"tags":[],"headings":[]},"3b6ee0ce23e66e6551832f2a11b117ba9bcbb9c43545949e8608a0ec4b56c255":{"links":[{"line":150,"link":"C#结构体对齐大小问题","original":"[[C#结构体对齐大小问题]]","displayText":"","beforeContext":"见onenote结构体部分笔记和","afterContext":""}],"embeds":[{"line":153,"link":"C语言内存分配图.png","original":"![[C语言内存分配图.png]]","beforeContext":"实际上是C语言中常用的几个section（段，程序或者变量存放的位置）","afterContext":""}],"tags":[],"headings":[{"line":0,"heading":"C语言内存","level":1},{"line":2,"heading":"指针基础","level":2},{"line":4,"heading":"指针修饰符","level":3},{"line":5,"heading":"const    常量，只读，不能变","level":4},{"line":25,"heading":"数组","level":2},{"line":32,"heading":"初始化","level":3},{"line":33,"heading":"int a[10] = 空间","level":4},{"line":34,"heading":"C语言{}的意义","level":4},{"line":38,"heading":"char buf[10] = {'a','b','c'}\t普通数组用法","level":4},{"line":42,"heading":"char buf[10] = {\"abc\"}\t字符串用法","level":4},{"line":45,"heading":"char buf[10] = \"abc\"","level":4},{"line":48,"heading":"char buf[10] = \"abc\"与char *p = \"abc\"区别","level":4},{"line":57,"heading":"char buf[] = \"abc\"与以上带buf[10]的区别","level":4},{"line":60,"heading":"初始化完后二次赋值","level":3},{"line":61,"heading":"分为字符空间和非字符空间拷贝","level":4},{"line":68,"heading":"字符空间拷贝原则","level":4},{"line":72,"heading":"strcpy()","level":4},{"line":75,"heading":"非字符空间拷贝原则","level":4},{"line":81,"heading":"memcpy()","level":4},{"line":92,"heading":"指针数组char *a[100]","level":3},{"line":98,"heading":"指针数组和二维指针的关系 char **a","level":4},{"line":103,"heading":"指针和数组原理性知识总结","level":3},{"line":104,"heading":"定义指针，分别表示 int a[10],int b[5][6]首地址","level":4},{"line":113,"heading":"C语言编译器本质是字符解释器，定义变量是基于变量名优先从右边解释","level":4},{"line":114,"heading":"int a[10]","level":5},{"line":118,"heading":"int *a","level":5},{"line":123,"heading":"int *a[10]","level":5},{"line":127,"heading":"int **a","level":5},{"line":131,"heading":"int (*p)[10]","level":5},{"line":135,"heading":"解释：始终记住指针和数组的本质","level":4},{"line":138,"heading":"指针是否够表示数组名判断技巧","level":5},{"line":149,"heading":"结构体","level":2},{"line":152,"heading":"内存分布图","level":2},{"line":156,"heading":"size x.out查看x.out各段所占空间的大小","level":3},{"line":158,"heading":"程序分debug版和release版的原因","level":3},{"line":159,"heading":"可执行文件大小由.text段和.data段决定","level":4},{"line":160,"heading":"printf()中的“”字符所在内存也保存在text段，使用printf越多，text段越大","level":4},{"line":161,"heading":"linux下程序中不同位置加减变量或数组测试出异常点：","level":4},{"line":168,"heading":"函数内static和全局变量存放位置一样，区别在于","level":3},{"line":171,"heading":"使用nm -n查看函数中各个符号所在位置","level":3},{"line":173,"heading":"堆空间的分配和释放","level":3},{"line":174,"heading":"malloc()一旦申请成功，返回地址，","level":4},{"line":181,"heading":"释放","level":4},{"line":184,"heading":"函数名，数组名","level":2},{"line":230,"heading":"函数名，数组名，变量名都是些标识符，在编译到最后都会使用地址代替，不存在储存这些名的问题","level":3},{"line":232,"heading":"函数指针相关","level":2}]}},"algorithmVersion":6}